# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Build and Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-2
  AWS_S3_BUCKET: gameinfogg-bucket
  AWS_CODE_DEPLOY_APPLICATION: gameinfogg-application-CD
  AWS_CODE_DEPLOY_GROUP: gameinfogg-deployment-group
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      # JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      #properties 만들기
      - uses: actions/checkout@v2
      - run: touch ./backend/src/main/resources/application-real.properties
      - run: echo "${{secrets.APPLICATION_REAL}}" > ./backend/src/main/resources/application-real.properties
      - uses: actions/upload-artifact@v2
        with:
          name: application-real.properties
          path: ./backend/src/main/resources/application-real.properties

      - uses: actions/checkout@v2
        - run: touch ./backend/src/main/resources/application-real-db.properties
      - run: echo "${{secrets.APPLICATION_REAL_DB}}" > ./backend/src/main/resources/application-real-db.properties
      - uses: actions/upload-artifact@v2
        with:
          name: application-real-db.properties
          path: ./backend/src/main/resources/application-real-db.properties


      # 권한 부여
      - name: Grant execute permission for gradlew
        run: |
          cd backend
          chmod +x ./gradlew
        shell: bash

      - name: Build and Test
        run: |
          cd backend
          ./gradlew build test

      # 빌드 파일을 zip 형식으로 압축
      - name: Make zip file
        run: zip -r ./$GITHUB_SHA.zip .
        shell: bash

      # AWS 권한 설정
      - name: AWS credential 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.CICD_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CICD_SECRET_KEY }}

      # S3에 빌드 파일 업로드
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$AWS_S3_BUCKET/$GITHUB_SHA.zip

      # EC2에 배포
      - name: EC2에 배포
        run: aws deploy create-deployment --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name ${{ env.AWS_CODE_DEPLOY_GROUP }} --s3-location bucket=$AWS_S3_BUCKET,key=$GITHUB_SHA.zip,bundleType=zip
        
